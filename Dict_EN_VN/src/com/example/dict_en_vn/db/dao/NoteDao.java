package com.example.dict_en_vn.db.dao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "EN - VN";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Word = new Property(1, String.class, "word", false, "word");
        public final static Property Content = new Property(2, String.class, "content", false, "content");
        public final static Property Pronunciation = new Property(3, String.class, "pronunciation", false, "pronunciation");
        public final static Property Voice = new Property(4, String.class, "voice", false, "voice");
        public final static Property Unsign = new Property(5, String.class, "unsign_vn", false, "unsign_vn");
        public final static Property Story = new Property(6, Long.class, "story", false, "story");
        public final static Property Family = new Property(7, Long.class, "family", false, "family");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }
    public List<Note> getListLimit(SQLiteDatabase db, String search){
    	String textColumn = NoteDao.Properties.Word.columnName;
		 String orderBy = textColumn + " COLLATE LOCALIZED ASC";
		 String sqlStr = "select * from " + "'"+getTablename()+"'"+" WHERE  "+NoteDao.Properties.Word.columnName+" like '"+search+"%' order by "+NoteDao.Properties.Word.columnName+" ASC LIMIT 0,5 ";
		 Cursor cursor = db.rawQuery(sqlStr, null);
//		 Cursor cursor = db.query(getTablename(), getAllColumns(), null, null, null, null, orderBy);
    	List<Note> data = new ArrayList<Note>();
        if (cursor.moveToFirst()){
            do{
                Note entity = readEntity(cursor, 0);
                data.add(entity);
            }while (cursor.moveToNext());
        }
        cursor.close();
        return data;
    }
    public Note getDataWithValue(SQLiteDatabase db, String fieldID,String fieldValue) {
        String Query = "Select * from '" + getTablename() + "' where " + fieldID + "= '"
                + fieldValue +"'";
        Cursor cursor = db.rawQuery(Query, null);
        Note  note= null;
        if (cursor.moveToFirst()){
        	note = readEntity(cursor, 0);
        }
        return note;
    }
    public Note getDataWithID(SQLiteDatabase db, long id) {
    	String Query = "Select * from " + getTablename() + " where " + NoteDao.Properties.Id.columnName + "="
    			+ id;
    	Cursor cursor = db.rawQuery(Query, null);
    	Note  note= null;
    	if (cursor.moveToFirst()){
    		note = readEntity(cursor, 0);
    	}
    	return note;
    }
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEXT' TEXT NOT NULL ," + // 1: text
                "'COMMENT' TEXT," + // 2: comment
                "'DATE' INTEGER);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWord());
 
        String comment = entity.getContent();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
        stmt.bindString(4, entity.getPronunciation());
        stmt.bindString(5, entity.getVoice());
        stmt.bindString(6, entity.getUnsign_vn());
        long story = entity.getStory();
        stmt.bindLong(7, story);
        long family = entity.getFamily();
        stmt.bindLong(8, family);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
    		cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
			cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comment
			cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comment
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // date
    		cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord(cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPronunciation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVoice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnsign_vn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStory(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFamily(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
